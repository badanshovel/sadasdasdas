{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emptinesssick\\\\Desktop\\\\pisun\\\\src\\\\TicTacToe.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./TicTacToe.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicTacToe = () => {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const checkWinner = board => {\n    const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let combo of winningCombos) {\n      const [a, b, c] = combo;\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        return board[a];\n      }\n    }\n    return null;\n  };\n  const handleClick = index => {\n    if (board[index] || checkWinner(board)) return;\n    const newBoard = [...board];\n    newBoard[index] = \"X\";\n    setBoard(newBoard);\n    setTimeout(() => botMove(newBoard), 500);\n  };\n  const botMove = currentBoard => {\n    const emptyCells = currentBoard.map((cell, index) => cell === null ? index : null).filter(index => index !== null);\n    if (emptyCells.length === 0 || checkWinner(currentBoard)) return;\n    const randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    currentBoard[randomIndex] = \"O\";\n    setBoard([...currentBoard]);\n  };\n  const winner = checkWinner(board);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"back-button\",\n      children: \"\\u2B05 \\u041D\\u0430\\u0437\\u0430\\u0434\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u041A\\u0440\\u0435\\u0441\\u0442\\u0438\\u043A\\u0438-\\u043D\\u043E\\u043B\\u0438\\u043A\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell\",\n        onClick: () => handleClick(index),\n        children: cell\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"\\u041F\\u043E\\u0431\\u0435\\u0434\\u0438\\u0442\\u0435\\u043B\\u044C: \", winner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(TicTacToe, \"1K3Vu9OcSUctNj4ePzTiMTGoH/o=\");\n_c = TicTacToe;\nexport default TicTacToe;\nvar _c;\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"names":["React","useState","Link","jsxDEV","_jsxDEV","TicTacToe","_s","board","setBoard","Array","fill","checkWinner","winningCombos","combo","a","b","c","handleClick","index","newBoard","setTimeout","botMove","currentBoard","emptyCells","map","cell","filter","length","randomIndex","Math","floor","random","winner","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/emptinesssick/Desktop/pisun/src/TicTacToe.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./TicTacToe.css\";\r\n\r\nconst TicTacToe = () => {\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n\r\n  const checkWinner = (board) => {\r\n    const winningCombos = [\r\n      [0, 1, 2], [3, 4, 5], [6, 7, 8],\r\n      [0, 3, 6], [1, 4, 7], [2, 5, 8],\r\n      [0, 4, 8], [2, 4, 6]\r\n    ];\r\n    \r\n    for (let combo of winningCombos) {\r\n      const [a, b, c] = combo;\r\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n        return board[a];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleClick = (index) => {\r\n    if (board[index] || checkWinner(board)) return;\r\n    const newBoard = [...board];\r\n    newBoard[index] = \"X\";\r\n    setBoard(newBoard);\r\n    setTimeout(() => botMove(newBoard), 500);\r\n  };\r\n\r\n  const botMove = (currentBoard) => {\r\n    const emptyCells = currentBoard.map((cell, index) => cell === null ? index : null).filter(index => index !== null);\r\n    if (emptyCells.length === 0 || checkWinner(currentBoard)) return;\r\n    const randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];\r\n    currentBoard[randomIndex] = \"O\";\r\n    setBoard([...currentBoard]);\r\n  };\r\n\r\n  const winner = checkWinner(board);\r\n  return (\r\n    <div className=\"game-container\">\r\n      <Link to=\"/\" className=\"back-button\">⬅ Назад</Link>\r\n      <h2>Крестики-нолики</h2>\r\n      <div className=\"board\">\r\n        {board.map((cell, index) => (\r\n          <div key={index} className=\"cell\" onClick={() => handleClick(index)}>\r\n            {cell}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {winner && <h3>Победитель: {winner}</h3>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TicTacToe;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}