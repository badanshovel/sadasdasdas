{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emptinesssick\\\\Desktop\\\\pisun\\\\src\\\\TicTacToe.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./TicTacToe.css\";\n\n// Уровни сложности\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LEVELS = {\n  EASY: 'easy',\n  MEDIUM: 'medium',\n  HARD: 'hard'\n};\nconst TicTacToe = () => {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [winner, setWinner] = useState(null);\n  const [difficulty, setDifficulty] = useState(LEVELS.MEDIUM);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [botScore, setBotScore] = useState(0);\n  const checkWinner = board => {\n    const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let combo of winningCombos) {\n      const [a, b, c] = combo;\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        return board[a];\n      }\n    }\n    return null;\n  };\n  const findBestMove = (board, player) => {\n    const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let combo of winningCombos) {\n      const [a, b, c] = combo;\n      const cells = [board[a], board[b], board[c]];\n      const emptyCells = combo.filter(index => board[index] === null);\n      if (cells.filter(cell => cell === player).length === 2 && emptyCells.length === 1) {\n        return emptyCells[0];\n      }\n    }\n    return -1;\n  };\n  const botMove = currentBoard => {\n    const emptyCells = currentBoard.map((cell, index) => cell === null ? index : null).filter(index => index !== null);\n    if (difficulty === LEVELS.HARD) {\n      const bestMove = findBestMove(currentBoard, \"O\");\n      if (bestMove !== -1) {\n        currentBoard[bestMove] = \"O\";\n        setBoard([...currentBoard]);\n        return;\n      }\n    }\n    if (difficulty === LEVELS.MEDIUM) {\n      const blockingMove = findBestMove(currentBoard, \"X\");\n      if (blockingMove !== -1) {\n        currentBoard[blockingMove] = \"O\";\n        setBoard([...currentBoard]);\n        return;\n      }\n    }\n    const randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    currentBoard[randomIndex] = \"O\";\n    setBoard([...currentBoard]);\n  };\n  const handleClick = index => {\n    if (board[index] || winner) return;\n    const newBoard = [...board];\n    newBoard[index] = \"X\";\n    setBoard(newBoard);\n    const gameWinner = checkWinner(newBoard);\n    if (gameWinner) {\n      setWinner(gameWinner);\n      if (gameWinner === \"X\") setPlayerScore(playerScore + 1);else setBotScore(botScore + 1);\n    } else {\n      setTimeout(() => botMove(newBoard), 500);\n    }\n  };\n  const restartGame = () => {\n    setBoard(Array(9).fill(null));\n    setWinner(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"back-button\",\n      children: \"\\u2B05 \\u041D\\u0430\\u0437\\u0430\\u0434\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u041A\\u0440\\u0435\\u0441\\u0442\\u0438\\u043A\\u0438-\\u043D\\u043E\\u043B\\u0438\\u043A\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\u0421\\u043B\\u043E\\u0436\\u043D\\u043E\\u0441\\u0442\\u044C:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: difficulty,\n        onChange: e => setDifficulty(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: LEVELS.EASY,\n          children: \"\\u041B\\u0435\\u0433\\u043A\\u0438\\u0439\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: LEVELS.MEDIUM,\n          children: \"\\u0421\\u0440\\u0435\\u0434\\u043D\\u0438\\u0439\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: LEVELS.HARD,\n          children: \"\\u0421\\u043B\\u043E\\u0436\\u043D\\u044B\\u0439\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${winner && board[index] ? 'winner' : ''}`,\n        onClick: () => handleClick(index),\n        children: cell\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: winner === \"X\" ? \"Победитель: Игрок\" : \"Победитель: Бот\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0418\\u0433\\u0440\\u043E\\u043A: \", playerScore, \" | \\u0411\\u043E\\u0442: \", botScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"restart-button\",\n      onClick: restartGame,\n      children: \"\\u041F\\u0435\\u0440\\u0435\\u0437\\u0430\\u043F\\u0443\\u0441\\u0442\\u0438\\u0442\\u044C \\u0438\\u0433\\u0440\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(TicTacToe, \"KkvU7u3y4nzd/oe6bT+5yDiViN0=\");\n_c = TicTacToe;\nexport default TicTacToe;\nvar _c;\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"names":["React","useState","Link","jsxDEV","_jsxDEV","LEVELS","EASY","MEDIUM","HARD","TicTacToe","_s","board","setBoard","Array","fill","winner","setWinner","difficulty","setDifficulty","playerScore","setPlayerScore","botScore","setBotScore","checkWinner","winningCombos","combo","a","b","c","findBestMove","player","cells","emptyCells","filter","index","cell","length","botMove","currentBoard","map","bestMove","blockingMove","randomIndex","Math","floor","random","handleClick","newBoard","gameWinner","setTimeout","restartGame","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/emptinesssick/Desktop/pisun/src/TicTacToe.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./TicTacToe.css\";\r\n\r\n// Уровни сложности\r\nconst LEVELS = {\r\n  EASY: 'easy',\r\n  MEDIUM: 'medium',\r\n  HARD: 'hard',\r\n};\r\n\r\nconst TicTacToe = () => {\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  const [winner, setWinner] = useState(null);\r\n  const [difficulty, setDifficulty] = useState(LEVELS.MEDIUM);\r\n  const [playerScore, setPlayerScore] = useState(0);\r\n  const [botScore, setBotScore] = useState(0);\r\n\r\n  const checkWinner = (board) => {\r\n    const winningCombos = [\r\n      [0, 1, 2], [3, 4, 5], [6, 7, 8],\r\n      [0, 3, 6], [1, 4, 7], [2, 5, 8],\r\n      [0, 4, 8], [2, 4, 6]\r\n    ];\r\n\r\n    for (let combo of winningCombos) {\r\n      const [a, b, c] = combo;\r\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n        return board[a];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const findBestMove = (board, player) => {\r\n    const winningCombos = [\r\n      [0, 1, 2], [3, 4, 5], [6, 7, 8],\r\n      [0, 3, 6], [1, 4, 7], [2, 5, 8],\r\n      [0, 4, 8], [2, 4, 6]\r\n    ];\r\n\r\n    for (let combo of winningCombos) {\r\n      const [a, b, c] = combo;\r\n      const cells = [board[a], board[b], board[c]];\r\n      const emptyCells = combo.filter(index => board[index] === null);\r\n\r\n      if (cells.filter(cell => cell === player).length === 2 && emptyCells.length === 1) {\r\n        return emptyCells[0];\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  const botMove = (currentBoard) => {\r\n    const emptyCells = currentBoard.map((cell, index) => cell === null ? index : null).filter(index => index !== null);\r\n\r\n    if (difficulty === LEVELS.HARD) {\r\n      const bestMove = findBestMove(currentBoard, \"O\");\r\n      if (bestMove !== -1) {\r\n        currentBoard[bestMove] = \"O\";\r\n        setBoard([...currentBoard]);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (difficulty === LEVELS.MEDIUM) {\r\n      const blockingMove = findBestMove(currentBoard, \"X\");\r\n      if (blockingMove !== -1) {\r\n        currentBoard[blockingMove] = \"O\";\r\n        setBoard([...currentBoard]);\r\n        return;\r\n      }\r\n    }\r\n\r\n    const randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];\r\n    currentBoard[randomIndex] = \"O\";\r\n    setBoard([...currentBoard]);\r\n  };\r\n\r\n  const handleClick = (index) => {\r\n    if (board[index] || winner) return;\r\n    const newBoard = [...board];\r\n    newBoard[index] = \"X\";\r\n    setBoard(newBoard);\r\n\r\n    const gameWinner = checkWinner(newBoard);\r\n    if (gameWinner) {\r\n      setWinner(gameWinner);\r\n      if (gameWinner === \"X\") setPlayerScore(playerScore + 1);\r\n      else setBotScore(botScore + 1);\r\n    } else {\r\n      setTimeout(() => botMove(newBoard), 500);\r\n    }\r\n  };\r\n\r\n  const restartGame = () => {\r\n    setBoard(Array(9).fill(null));\r\n    setWinner(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <Link to=\"/\" className=\"back-button\">⬅ Назад</Link>\r\n      <h2>Крестики-нолики</h2>\r\n\r\n      <div className=\"difficulty\">\r\n        <label>Сложность:</label>\r\n        <select value={difficulty} onChange={(e) => setDifficulty(e.target.value)}>\r\n          <option value={LEVELS.EASY}>Легкий</option>\r\n          <option value={LEVELS.MEDIUM}>Средний</option>\r\n          <option value={LEVELS.HARD}>Сложный</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"board\">\r\n        {board.map((cell, index) => (\r\n          <div\r\n            key={index}\r\n            className={`cell ${winner && board[index] ? 'winner' : ''}`}\r\n            onClick={() => handleClick(index)}\r\n          >\r\n            {cell}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {winner && <h3>{winner === \"X\" ? \"Победитель: Игрок\" : \"Победитель: Бот\"}</h3>}\r\n      <div className=\"stats\">\r\n        <p>Игрок: {playerScore} | Бот: {botScore}</p>\r\n      </div>\r\n\r\n      <button className=\"restart-button\" onClick={restartGame}>Перезапустить игру</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TicTacToe;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}