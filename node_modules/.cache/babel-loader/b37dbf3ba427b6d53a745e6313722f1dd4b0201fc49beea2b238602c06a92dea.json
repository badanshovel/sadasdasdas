{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emptinesssick\\\\Desktop\\\\pisun\\\\src\\\\TicTacToe.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./TicTacToe.css\";\n\n// Уровни сложности\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LEVELS = {\n  EASY: 'easy',\n  MEDIUM: 'medium',\n  HARD: 'hard'\n};\nconst TicTacToe = () => {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [winner, setWinner] = useState(null);\n  const [difficulty, setDifficulty] = useState(LEVELS.MEDIUM);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [botScore, setBotScore] = useState(0);\n  const [winningCells, setWinningCells] = useState([]); // Для подсветки выигрышных клеток\n  const [isGameOver, setIsGameOver] = useState(false); // Флаг окончания игры\n\n  const checkWinner = board => {\n    const winningCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let combo of winningCombos) {\n      const [a, b, c] = combo;\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n        setWinningCells([a, b, c]); // Сохраняем выигрышные клетки\n        return board[a];\n      }\n    }\n    return null;\n  };\n  const minimax = (board, depth, isMaximizing) => {\n    const winner = checkWinner(board);\n    if (winner === 'X') return -10 + depth;\n    if (winner === 'O') return 10 - depth;\n    if (board.every(cell => cell !== null)) return 0; // Ничья\n\n    const emptyCells = board.map((cell, index) => cell === null ? index : null).filter(index => index !== null);\n    if (isMaximizing) {\n      let best = -Infinity;\n      for (let index of emptyCells) {\n        board[index] = 'O';\n        const score = minimax(board, depth + 1, false);\n        board[index] = null;\n        best = Math.max(score, best);\n      }\n      return best;\n    } else {\n      let best = Infinity;\n      for (let index of emptyCells) {\n        board[index] = 'X';\n        const score = minimax(board, depth + 1, true);\n        board[index] = null;\n        best = Math.min(score, best);\n      }\n      return best;\n    }\n  };\n  const findBestMove = board => {\n    let bestMove = -1;\n    let bestValue = -Infinity;\n    for (let i = 0; i < 9; i++) {\n      if (board[i] === null) {\n        board[i] = 'O';\n        const moveValue = minimax(board, 0, false);\n        board[i] = null;\n        if (moveValue > bestValue) {\n          bestValue = moveValue;\n          bestMove = i;\n        }\n      }\n    }\n    return bestMove;\n  };\n  const botMove = currentBoard => {\n    const emptyCells = currentBoard.map((cell, index) => cell === null ? index : null).filter(index => index !== null);\n    if (difficulty === LEVELS.HARD) {\n      const bestMove = findBestMove(currentBoard);\n      if (bestMove !== -1) {\n        currentBoard[bestMove] = \"O\";\n        setBoard([...currentBoard]);\n        return;\n      }\n    }\n    if (difficulty === LEVELS.MEDIUM) {\n      const blockingMove = findBestMove(currentBoard, \"X\");\n      if (blockingMove !== -1) {\n        currentBoard[blockingMove] = \"O\";\n        setBoard([...currentBoard]);\n        return;\n      }\n    }\n    const randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    currentBoard[randomIndex] = \"O\";\n    setBoard([...currentBoard]);\n  };\n  const handleClick = index => {\n    if (board[index] || winner || isGameOver) return;\n    const newBoard = [...board];\n    newBoard[index] = \"X\";\n    setBoard(newBoard);\n    const gameWinner = checkWinner(newBoard);\n    if (gameWinner) {\n      setWinner(gameWinner);\n      if (gameWinner === \"X\") setPlayerScore(playerScore + 1);else setBotScore(botScore + 1);\n      setIsGameOver(true); // Игра закончена\n    } else {\n      setTimeout(() => {\n        botMove(newBoard);\n        const botWinner = checkWinner(newBoard);\n        if (botWinner) {\n          setWinner(botWinner);\n          if (botWinner === \"O\") setBotScore(botScore + 1);\n          setIsGameOver(true); // Игра закончена\n        }\n      }, 500);\n    }\n  };\n  const restartGame = () => {\n    setBoard(Array(9).fill(null));\n    setWinner(null);\n    setWinningCells([]); // Сброс подсветки\n    setIsGameOver(false); // Сброс флага окончания игры\n  };\n  const resetScores = () => {\n    setPlayerScore(0);\n    setBotScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"back-button\",\n      children: \"\\u2B05 \\u041D\\u0430\\u0437\\u0430\\u0434\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u041A\\u0440\\u0435\\u0441\\u0442\\u0438\\u043A\\u0438-\\u043D\\u043E\\u043B\\u0438\\u043A\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0441\\u043B\\u043E\\u0436\\u043D\\u043E\\u0441\\u0442\\u044C:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"difficulty-buttons\",\n        children: Object.keys(LEVELS).map(level => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `difficulty-button ${difficulty === LEVELS[level] ? 'active' : ''}`,\n          onClick: () => setDifficulty(LEVELS[level]),\n          children: level.charAt(0).toUpperCase() + level.slice(1).toLowerCase()\n        }, level, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((cell, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${winner && winningCells.includes(index) ? cell === 'X' ? 'winner-player' : 'winner-bot' : ''}`,\n        onClick: () => handleClick(index),\n        children: cell\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: winner === \"X\" ? \"Победитель: Игрок\" : \"Победитель: Бот\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0418\\u0433\\u0440\\u043E\\u043A: \", playerScore, \" | \\u0411\\u043E\\u0442: \", botScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: winner === \"X\" ? \"Вы победили!\" : winner === \"O\" ? \"Бот победил!\" : \"Ничья!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restartGame,\n          className: \"restart-button\",\n          children: \"\\u041F\\u0435\\u0440\\u0435\\u0437\\u0430\\u043F\\u0443\\u0441\\u0442\\u0438\\u0442\\u044C \\u0438\\u0433\\u0440\\u0443\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetScores,\n          className: \"reset-scores-button\",\n          children: \"\\u0421\\u0431\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C \\u0441\\u0447\\u0451\\u0442\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(TicTacToe, \"P5MudAU2WSOBCmlF3cqbs/t1UVo=\");\n_c = TicTacToe;\nexport default TicTacToe;\nvar _c;\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"names":["React","useState","Link","jsxDEV","_jsxDEV","LEVELS","EASY","MEDIUM","HARD","TicTacToe","_s","board","setBoard","Array","fill","winner","setWinner","difficulty","setDifficulty","playerScore","setPlayerScore","botScore","setBotScore","winningCells","setWinningCells","isGameOver","setIsGameOver","checkWinner","winningCombos","combo","a","b","c","minimax","depth","isMaximizing","every","cell","emptyCells","map","index","filter","best","Infinity","score","Math","max","min","findBestMove","bestMove","bestValue","i","moveValue","botMove","currentBoard","blockingMove","randomIndex","floor","random","length","handleClick","newBoard","gameWinner","setTimeout","botWinner","restartGame","resetScores","className","children","to","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","level","onClick","charAt","toUpperCase","slice","toLowerCase","includes","_c","$RefreshReg$"],"sources":["C:/Users/emptinesssick/Desktop/pisun/src/TicTacToe.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./TicTacToe.css\";\r\n\r\n// Уровни сложности\r\nconst LEVELS = {\r\n  EASY: 'easy',\r\n  MEDIUM: 'medium',\r\n  HARD: 'hard',\r\n};\r\n\r\nconst TicTacToe = () => {\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  const [winner, setWinner] = useState(null);\r\n  const [difficulty, setDifficulty] = useState(LEVELS.MEDIUM);\r\n  const [playerScore, setPlayerScore] = useState(0);\r\n  const [botScore, setBotScore] = useState(0);\r\n  const [winningCells, setWinningCells] = useState([]); // Для подсветки выигрышных клеток\r\n  const [isGameOver, setIsGameOver] = useState(false); // Флаг окончания игры\r\n\r\n  const checkWinner = (board) => {\r\n    const winningCombos = [\r\n      [0, 1, 2], [3, 4, 5], [6, 7, 8],\r\n      [0, 3, 6], [1, 4, 7], [2, 5, 8],\r\n      [0, 4, 8], [2, 4, 6]\r\n    ];\r\n\r\n    for (let combo of winningCombos) {\r\n      const [a, b, c] = combo;\r\n      if (board[a] && board[a] === board[b] && board[a] === board[c]) {\r\n        setWinningCells([a, b, c]); // Сохраняем выигрышные клетки\r\n        return board[a];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const minimax = (board, depth, isMaximizing) => {\r\n    const winner = checkWinner(board);\r\n    if (winner === 'X') return -10 + depth;\r\n    if (winner === 'O') return 10 - depth;\r\n    if (board.every(cell => cell !== null)) return 0; // Ничья\r\n\r\n    const emptyCells = board.map((cell, index) => cell === null ? index : null).filter(index => index !== null);\r\n\r\n    if (isMaximizing) {\r\n      let best = -Infinity;\r\n      for (let index of emptyCells) {\r\n        board[index] = 'O';\r\n        const score = minimax(board, depth + 1, false);\r\n        board[index] = null;\r\n        best = Math.max(score, best);\r\n      }\r\n      return best;\r\n    } else {\r\n      let best = Infinity;\r\n      for (let index of emptyCells) {\r\n        board[index] = 'X';\r\n        const score = minimax(board, depth + 1, true);\r\n        board[index] = null;\r\n        best = Math.min(score, best);\r\n      }\r\n      return best;\r\n    }\r\n  };\r\n\r\n  const findBestMove = (board) => {\r\n    let bestMove = -1;\r\n    let bestValue = -Infinity;\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n      if (board[i] === null) {\r\n        board[i] = 'O';\r\n        const moveValue = minimax(board, 0, false);\r\n        board[i] = null;\r\n        if (moveValue > bestValue) {\r\n          bestValue = moveValue;\r\n          bestMove = i;\r\n        }\r\n      }\r\n    }\r\n\r\n    return bestMove;\r\n  };\r\n\r\n  const botMove = (currentBoard) => {\r\n    const emptyCells = currentBoard.map((cell, index) => cell === null ? index : null).filter(index => index !== null);\r\n\r\n    if (difficulty === LEVELS.HARD) {\r\n      const bestMove = findBestMove(currentBoard);\r\n      if (bestMove !== -1) {\r\n        currentBoard[bestMove] = \"O\";\r\n        setBoard([...currentBoard]);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (difficulty === LEVELS.MEDIUM) {\r\n      const blockingMove = findBestMove(currentBoard, \"X\");\r\n      if (blockingMove !== -1) {\r\n        currentBoard[blockingMove] = \"O\";\r\n        setBoard([...currentBoard]);\r\n        return;\r\n      }\r\n    }\r\n\r\n    const randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];\r\n    currentBoard[randomIndex] = \"O\";\r\n    setBoard([...currentBoard]);\r\n  };\r\n\r\n  const handleClick = (index) => {\r\n    if (board[index] || winner || isGameOver) return;\r\n    const newBoard = [...board];\r\n    newBoard[index] = \"X\";\r\n    setBoard(newBoard);\r\n\r\n    const gameWinner = checkWinner(newBoard);\r\n    if (gameWinner) {\r\n      setWinner(gameWinner);\r\n      if (gameWinner === \"X\") setPlayerScore(playerScore + 1);\r\n      else setBotScore(botScore + 1);\r\n      setIsGameOver(true); // Игра закончена\r\n    } else {\r\n      setTimeout(() => {\r\n        botMove(newBoard);\r\n        const botWinner = checkWinner(newBoard);\r\n        if (botWinner) {\r\n          setWinner(botWinner);\r\n          if (botWinner === \"O\") setBotScore(botScore + 1);\r\n          setIsGameOver(true); // Игра закончена\r\n        }\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  const restartGame = () => {\r\n    setBoard(Array(9).fill(null));\r\n    setWinner(null);\r\n    setWinningCells([]); // Сброс подсветки\r\n    setIsGameOver(false); // Сброс флага окончания игры\r\n  };\r\n\r\n  const resetScores = () => {\r\n    setPlayerScore(0);\r\n    setBotScore(0);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <Link to=\"/\" className=\"back-button\">⬅ Назад</Link>\r\n      <h2>Крестики-нолики</h2>\r\n\r\n      <div className=\"difficulty\">\r\n        <h3>Выберите сложность:</h3>\r\n        <div className=\"difficulty-buttons\">\r\n          {Object.keys(LEVELS).map((level) => (\r\n            <button\r\n              key={level}\r\n              className={`difficulty-button ${difficulty === LEVELS[level] ? 'active' : ''}`}\r\n              onClick={() => setDifficulty(LEVELS[level])}\r\n            >\r\n              {level.charAt(0).toUpperCase() + level.slice(1).toLowerCase()}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"board\">\r\n        {board.map((cell, index) => (\r\n          <div\r\n            key={index}\r\n            className={`cell ${winner && winningCells.includes(index) ? (cell === 'X' ? 'winner-player' : 'winner-bot') : ''}`}\r\n            onClick={() => handleClick(index)}\r\n          >\r\n            {cell}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {winner && <h3>{winner === \"X\" ? \"Победитель: Игрок\" : \"Победитель: Бот\"}</h3>}\r\n\r\n      <div className=\"stats\">\r\n        <p>Игрок: {playerScore} | Бот: {botScore}</p>\r\n      </div>\r\n\r\n      <div className=\"game-over\">\r\n        {isGameOver && (\r\n          <div>\r\n            <h4>{winner === \"X\" ? \"Вы победили!\" : winner === \"O\" ? \"Бот победил!\" : \"Ничья!\"}</h4>\r\n            <button onClick={restartGame} className=\"restart-button\">Перезапустить игру</button>\r\n            <button onClick={resetScores} className=\"reset-scores-button\">Сбросить счёт</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TicTacToe;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}